import os
import joblib
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score, classification_report
from data.dataset import SVMSpectrogramDataset

# ======================
# ‚öôÔ∏è ÈÖçÁΩÆÂèÇÊï∞
# ======================

EXPERIMENT_NAME = "exp_baseline_1000samples"
EXPERIMENT_DIR = f"E:/AMR/DA/Projekt/bird_cls_cnn/projekt_svm/experiments/{EXPERIMENT_NAME}"
MODEL_SAVE_PATH = os.path.join(EXPERIMENT_DIR, "models", "svm_model.joblib")
REPORT_SAVE_PATH = os.path.join(EXPERIMENT_DIR, "classification_report.txt")

TRAIN_CSV = "E:/AMR/DA/Projekt/data/data_list/0408/train_list_high_quality.csv"
VALID_CSV = "E:/AMR/DA/Projekt/data/data_list/0408/valid_list_high_quality.csv"
MAX_SAMPLES_PER_CLASS_TRAIN = 1000
MAX_SAMPLES_PER_CLASS_VALID = 300
PCA_COMPONENTS = 256
PCA_BATCH_SIZE = 256

MODEL_TYPE = "sgd"  # <<< Âè™ÈúÄË¶ÅÂú®ËøôÈáåÊîπÊàê "svm" Êàñ "sgd"

# ======================
# üìÅ ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
# ======================
os.makedirs(os.path.join(EXPERIMENT_DIR, "models"), exist_ok=True)

# ======================
# üì• Âä†ËΩΩËÆ≠ÁªÉÈõÜ
# ======================
print("üì• Âä†ËΩΩËÆ≠ÁªÉÈõÜ + PCA ÊãüÂêà...")
train_dataset = SVMSpectrogramDataset(
    csv_path=TRAIN_CSV,
    max_samples_per_class=MAX_SAMPLES_PER_CLASS_TRAIN,
    pca_components=256,
    pca_batch_size=256,
    pca_save_path="E:/AMR/DA/Projekt/bird_cls_cnn/projekt_svm/pca/pca_model_1000samples.joblib",
    use_saved_pca=False
)
X_train, y_train = train_dataset.get_data()
label_mapping = train_dataset.get_label_mapping()

# ======================
# üì• Âä†ËΩΩÊµãËØïÈõÜ
# ======================
print("üì• Âä†ËΩΩÊµãËØïÈõÜ + ‰ΩøÁî®ËÆ≠ÁªÉÈõÜÁöÑ PCA...")
valid_dataset = SVMSpectrogramDataset(
    csv_path=VALID_CSV,
    label_mapping=train_dataset.get_label_mapping(),
    max_samples_per_class=MAX_SAMPLES_PER_CLASS_VALID,
    pca_components=256,
    pca_batch_size=256,
    pca_save_path="E:/AMR/DA/Projekt/bird_cls_cnn/projekt_svm/pca/pca_model_1000samples.joblib",
    use_saved_pca=True
)
X_test, y_test = valid_dataset.get_data()

# ======================
# üß† ÂàùÂßãÂåñÊ®°Âûã
# ======================
if MODEL_TYPE == "svm":
    print("üöÄ ‰ΩøÁî® LinearSVC ËÆ≠ÁªÉ...")
    clf = LinearSVC(C=1.0, max_iter=5000)
elif MODEL_TYPE == "sgd":
    print("üöÄ ‰ΩøÁî® SGDClassifier (hinge loss) ËÆ≠ÁªÉ...")
    clf = SGDClassifier(loss="hinge", penalty="l2", alpha=1e-4, max_iter=1000, random_state=42)
else:
    raise ValueError(f"Êú™Áü•Ê®°ÂûãÁ±ªÂûã: {MODEL_TYPE}")

# ======================
# üèãÔ∏è‚Äç‚ôÇÔ∏è ËÆ≠ÁªÉÊ®°Âûã
# ======================
clf.fit(X_train, y_train)
print("‚úÖ Ê®°ÂûãËÆ≠ÁªÉÂÆåÊàê")

# ======================
# üìà ËØÑ‰º∞Ê®°Âûã
# ======================
y_pred = clf.predict(X_test)
acc = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred, target_names=label_mapping.keys())

print(f"\nüéØ ÊµãËØïÈõÜÂáÜÁ°ÆÁéá: {acc:.4f}")
print("\nüìÑ ÂàÜÁ±ªÊä•Âëä:\n")
print(report)

# ======================
# üíæ ‰øùÂ≠òÊ®°ÂûãÂíåÊä•Âëä
# ======================
joblib.dump(clf, MODEL_SAVE_PATH)
print(f"‚úÖ Ê®°ÂûãÂ∑≤‰øùÂ≠òËá≥: {MODEL_SAVE_PATH}")

with open(REPORT_SAVE_PATH, "w", encoding="utf-8") as f:
    f.write(f"ÊµãËØïÈõÜÂáÜÁ°ÆÁéá: {acc:.4f}\n\n")
    f.write(report)
print(f"üìù ÂàÜÁ±ªÊä•ÂëäÂ∑≤‰øùÂ≠òËá≥: {REPORT_SAVE_PATH}")
